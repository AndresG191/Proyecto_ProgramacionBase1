# Generated from Ensamblador.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,3,0,56,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,3,16,147,8,16,1,17,3,17,150,8,17,1,17,4,17,153,8,17,11,
        17,12,17,154,1,17,1,17,4,17,159,8,17,11,17,12,17,160,3,17,163,8,
        17,1,18,1,18,5,18,167,8,18,10,18,12,18,170,9,18,1,19,1,19,5,19,174,
        8,19,10,19,12,19,177,9,19,1,20,1,20,1,20,1,21,1,21,1,22,3,22,185,
        8,22,1,22,4,22,188,8,22,11,22,12,22,189,1,23,4,23,193,8,23,11,23,
        12,23,194,1,23,1,23,1,24,1,24,1,24,1,24,5,24,203,8,24,10,24,12,24,
        206,9,24,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,1,0,18,2,0,83,83,115,115,2,0,82,
        82,114,114,2,0,77,77,109,109,2,0,68,68,100,100,2,0,71,71,103,103,
        2,0,67,67,99,99,2,0,73,73,105,105,2,0,69,69,101,101,2,0,89,89,121,
        121,2,0,65,65,97,97,3,0,42,43,45,45,47,47,2,0,60,60,62,62,1,0,48,
        57,3,0,48,57,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,225,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,55,1,0,0,0,3,57,1,0,
        0,0,5,63,1,0,0,0,7,70,1,0,0,0,9,82,1,0,0,0,11,90,1,0,0,0,13,96,1,
        0,0,0,15,104,1,0,0,0,17,113,1,0,0,0,19,116,1,0,0,0,21,121,1,0,0,
        0,23,124,1,0,0,0,25,128,1,0,0,0,27,131,1,0,0,0,29,133,1,0,0,0,31,
        135,1,0,0,0,33,146,1,0,0,0,35,149,1,0,0,0,37,164,1,0,0,0,39,171,
        1,0,0,0,41,178,1,0,0,0,43,181,1,0,0,0,45,187,1,0,0,0,47,192,1,0,
        0,0,49,198,1,0,0,0,51,56,3,3,1,0,52,56,3,5,2,0,53,56,3,7,3,0,54,
        56,3,9,4,0,55,51,1,0,0,0,55,52,1,0,0,0,55,53,1,0,0,0,55,54,1,0,0,
        0,56,2,1,0,0,0,57,58,7,0,0,0,58,59,5,117,0,0,59,60,5,109,0,0,60,
        61,5,97,0,0,61,62,5,114,0,0,62,4,1,0,0,0,63,64,7,1,0,0,64,65,5,101,
        0,0,65,66,5,115,0,0,66,67,5,116,0,0,67,68,5,97,0,0,68,69,5,114,0,
        0,69,6,1,0,0,0,70,71,7,2,0,0,71,72,5,117,0,0,72,73,5,108,0,0,73,
        74,5,116,0,0,74,75,5,105,0,0,75,76,5,112,0,0,76,77,5,108,0,0,77,
        78,5,105,0,0,78,79,5,99,0,0,79,80,5,97,0,0,80,81,5,114,0,0,81,8,
        1,0,0,0,82,83,7,3,0,0,83,84,5,105,0,0,84,85,5,118,0,0,85,86,5,105,
        0,0,86,87,5,100,0,0,87,88,5,105,0,0,88,89,5,114,0,0,89,10,1,0,0,
        0,90,91,7,2,0,0,91,92,5,111,0,0,92,93,5,118,0,0,93,94,5,101,0,0,
        94,95,5,114,0,0,95,12,1,0,0,0,96,97,7,4,0,0,97,98,5,117,0,0,98,99,
        5,97,0,0,99,100,5,114,0,0,100,101,5,100,0,0,101,102,5,97,0,0,102,
        103,5,114,0,0,103,14,1,0,0,0,104,105,7,5,0,0,105,106,5,111,0,0,106,
        107,5,109,0,0,107,108,5,112,0,0,108,109,5,97,0,0,109,110,5,114,0,
        0,110,111,5,97,0,0,111,112,5,114,0,0,112,16,1,0,0,0,113,114,7,0,
        0,0,114,115,5,105,0,0,115,18,1,0,0,0,116,117,7,6,0,0,117,118,5,114,
        0,0,118,119,5,95,0,0,119,120,5,97,0,0,120,20,1,0,0,0,121,122,7,7,
        0,0,122,123,5,110,0,0,123,22,1,0,0,0,124,125,7,5,0,0,125,126,5,111,
        0,0,126,127,5,110,0,0,127,24,1,0,0,0,128,129,7,3,0,0,129,130,5,101,
        0,0,130,26,1,0,0,0,131,132,7,8,0,0,132,28,1,0,0,0,133,134,7,9,0,
        0,134,30,1,0,0,0,135,136,7,10,0,0,136,32,1,0,0,0,137,138,5,60,0,
        0,138,147,5,61,0,0,139,140,5,62,0,0,140,147,5,61,0,0,141,142,5,61,
        0,0,142,147,5,61,0,0,143,144,5,33,0,0,144,147,5,61,0,0,145,147,7,
        11,0,0,146,137,1,0,0,0,146,139,1,0,0,0,146,141,1,0,0,0,146,143,1,
        0,0,0,146,145,1,0,0,0,147,34,1,0,0,0,148,150,5,45,0,0,149,148,1,
        0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,153,7,12,0,0,152,151,1,
        0,0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,162,1,
        0,0,0,156,158,5,46,0,0,157,159,7,12,0,0,158,157,1,0,0,0,159,160,
        1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,156,
        1,0,0,0,162,163,1,0,0,0,163,36,1,0,0,0,164,168,7,1,0,0,165,167,7,
        13,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,
        0,0,0,169,38,1,0,0,0,170,168,1,0,0,0,171,175,7,14,0,0,172,174,7,
        15,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,
        0,0,0,176,40,1,0,0,0,177,175,1,0,0,0,178,179,3,39,19,0,179,180,5,
        58,0,0,180,42,1,0,0,0,181,182,5,44,0,0,182,44,1,0,0,0,183,185,5,
        13,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,188,5,
        10,0,0,187,184,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,
        0,0,0,190,46,1,0,0,0,191,193,7,16,0,0,192,191,1,0,0,0,193,194,1,
        0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,6,
        23,0,0,197,48,1,0,0,0,198,199,5,47,0,0,199,200,5,47,0,0,200,204,
        1,0,0,0,201,203,8,17,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,
        1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,
        6,24,0,0,208,50,1,0,0,0,13,0,55,146,149,154,160,162,168,175,184,
        189,194,204,1,6,0,0
    ]

class EnsambladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OPERACION_ARITMETICA = 1
    SUMAR = 2
    RESTAR = 3
    MULTIPLICAR = 4
    DIVIDIR = 5
    MOVER = 6
    GUARDAR = 7
    COMPARAR = 8
    SI = 9
    IR_A = 10
    EN = 11
    CON = 12
    DE = 13
    Y = 14
    A = 15
    OPERADOR = 16
    COMPARADOR = 17
    NUMERO = 18
    REGISTRO = 19
    ID = 20
    ETIQUETA = 21
    COMA = 22
    NEWLINE = 23
    WS = 24
    COMENTARIO = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "','" ]

    symbolicNames = [ "<INVALID>",
            "OPERACION_ARITMETICA", "SUMAR", "RESTAR", "MULTIPLICAR", "DIVIDIR", 
            "MOVER", "GUARDAR", "COMPARAR", "SI", "IR_A", "EN", "CON", "DE", 
            "Y", "A", "OPERADOR", "COMPARADOR", "NUMERO", "REGISTRO", "ID", 
            "ETIQUETA", "COMA", "NEWLINE", "WS", "COMENTARIO" ]

    ruleNames = [ "OPERACION_ARITMETICA", "SUMAR", "RESTAR", "MULTIPLICAR", 
                  "DIVIDIR", "MOVER", "GUARDAR", "COMPARAR", "SI", "IR_A", 
                  "EN", "CON", "DE", "Y", "A", "OPERADOR", "COMPARADOR", 
                  "NUMERO", "REGISTRO", "ID", "ETIQUETA", "COMA", "NEWLINE", 
                  "WS", "COMENTARIO" ]

    grammarFileName = "Ensamblador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


